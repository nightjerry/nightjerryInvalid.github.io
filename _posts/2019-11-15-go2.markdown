---
layout: post
title:  "go2 语法"
date:   2019-11-15 17:16:02 +0800
categories: jekyll update
tags: go
---

##2语法
[TOC]
### if/else
```go
var age int
if age >= 10 {
	fmt.Println("..")
}else{
	
}
```

#### switch

```go 
switch 变量/表达式 {
	case value1: running code
	case value2: running code
	case value3: running code
	default: running code
}
```
### 循环
#### for
```go
for 初始化变量; 判断条件; 更新变量 {

}
```
> `break`:结束当前循环
> `continue`: 结束本次循环，进入下一次循环

```go
//计算水仙花数
var h int //百位
var t int //十位
var b int //个位
for i:= 100; i<=999; i++ {
	h = i /100
	t = i % 100/ 10
	b = i % 10
	if h*h*h + t*t*t + b*b*t  == i {
		fmt.Println(i)
	}
}
```
```go
//99乘法表
for m:=1; m<=9 ; m++ {
	for n:=1; n<= m; n++ {
		fmt.Printf("%d * %d = %d\t", m, n,m*n)
	}
	fmt.Println()
}
```
### 函数
函数的语法

```go
func 函数名()返回值类型{

}
func methodName(value 类型){}
```
```go
//不定长参数列表
func test(args ...int){}
```
```go
k, v := range args //k为角标，v为值
_, v := range args //不使用角标时，可用_
```
```go
func add(num1 int, num2 int) int {
	var sum int
	sum = num1 + num2
	return sum
}
//另一种写法
func add(num1 int, num2 int) (sum int) {
	sum = num1 + num2
	return sum
}
func add(num1 int, num2 int) (sum int) {
	sum = num1 + num2
	return //如果已经指定了返回变量名称，return后面可以不加变量名称
}
```
```go
//返回多个值
func getResult()(int, int) {
	var num1 int = 10
	var num2 int = 20
	return num1, num2
}
n1, n2 = getResult()
```
> 全局变量和局部变量的名称相同，使用的是局部变量

#### defer延迟调用
函数中有多个`defer`语句，会以FILO(先进后出)的顺序执行

### 递归函数
```go
//阶乘计算
var s int = 1

func test(n int) {
	if n == 1 
		return
	s *= n
	test(n-1)
}
func main() {
	test(5)
	fmt.Println(s)
}
```
### 匿名函数
```go
func intSeq() func() int{
    i := 0
    return func() int{
        i++
        return i
    }
}
func main(){
    nextInt := intSeq()
    fmt.Println(nextInt())
    fmt.Println(nextInt())
    fmt.Println(nextInt())
    
    newInts := intSeq()
    fmt.Println(newInts())
}
1 2 3 1
```

### 复合类型
#### 数组
数组：同一类型数据的集合
数组定义： `var 数组名[数组长度] 类型`
数组初始化：

+ 全部初始化
+ 部分初始化
+ 指定某个元素初始化
+ 通过初始化确定数组长度

```go
var nums[5] int = [5]int{1,2,3,4,5}
```
```go
nums := [5]int{1,2} //1,2,0,0,0
```
```go
//指定某个元素初始化
nums := [5]int{2:5,3:6} //0,0,5,6,0
```
```go
//通过初始化确定数组长度
nums := [...]int{1,2,3,4} //不指定数组长度，由数组元素个数决定
```
```go
var nums[5] int 
```
#### 数组遍历
```go
var nums = [3]int{1,2,3}
for i:=0; i< len(nums); i++ {
	fmt.Println(nums[i])
}
```
```go
for i, v := range nums {
	fmt.Printf("下标: %d, 值: %d", i, v)
}
//下标:0, 值: 1
//下标:1, 值: 2
//下标:2, 值: 3
```
```go
//匿名变量
for _, v := range nums {
	fmt.Printf(v)
}
```
> 数组作为参数传递时，函数中修改数组的值，不会影响原数组.

```go
func main(){
	var nums = [3]int{1,2,3}
	change(nums)
	for _, v := range nums {
		fmt.Println(v)
	}
}
func change(n[3] int){
	n[2] = 5
}
//1,2,3
```
#### 二维数组
`var 数组名[m][n] 类型`

TODO

### 切片
定义切片: `var 切片名称 []数据类型`

数组长度固定，切片长度可变；
切片可追加元素；
> 切片可理解为"动态数组", 但它不是数组

使用类型推导创建切片： `切片名 := []类型{}`

使用`make`函数创建: `make(切片类型, 长度, 容量)`
> 长度是已经初始化的空间; 容量是已经开辟的空间, 包括已经初始化的空间和空闲空间
> 
> 使用`make(切片类型, 长度)`创建，容量=长度

```go
s := make([]int, 3, 5)
fmt.Println(s)           //[]
fmt.Println(len(s))      //3 计算长度
fmt.Println(cap(s))      //5 计算容量
```

#### 切片初始化
使用`append`追加值

```go
var s []int
s = append(s,1,2,3,4)
fmt.Println(s) 
//[1 2 3 4]
```
```go
//切片值的修改
var s []int
s = append(s,1,2,3,4)
s[0] = 10
fmt.Println(s) 
//[10 2 3 4]
```

创建切片时赋值

```go
s := []int{1,2,3}
```

> 切片遍历： 使用`for len` 或`for range `

#### 切片截取


| 操作 | 含义 |  
| --- | --- |  
| s[n] | 切片s中索引位置为n的值 |  |
| s[:] | 从切片s的索引0到len(s)-1所获得的切片 |  |
|s[low:]| 从切片s的索引low到len(s)-1所获得的切片 |  |
| s[:high] | 从切片s的索引0到high所获得的切片 |  |
| s[low:high] | 从切片s的索引low到high所获得的切片 |  |
| s[low:high:max] | 从切片s的索引low到high所获得的切片，len=high-low, cap=max-low |  |
| len(s) | 切片s的长度; 总是<=cap(s) |  |
| cap(s) | 切片s的容量  |  |

 ```go
 func main(){
     s := []int{1,2,3,4,5}
     s1 := s[1:3]
     s1[0] = 10
     fmt.Println(s)    //[10 2 3 4 5]
     fmt.Println(s1)   //[10 2]
}
 ```
> 对新切片元素的修改，会影响原切片； 
> 原因：通过截取得到的新切片，不会创建新的地址，而是引用原切片地址数据；

> 切片扩容: 
一般扩容方式为上一次: 容量*2; 如果超过1024字节，每次扩容上一次的1/4

#### copy函数
`copy(切片1，切片2）`: 将切片2中的元素覆盖切片1

```go
func main(){
    s1 := []int{1,2}
    s2 := []int{3,4,5}
    copy(s1,s2)
    fmt.Println(s1)
}
//[3 4]  将s2中的元素覆盖s1中的元素
```
```go
func main(){
    s1 := []int{1,2}
    s2 := []int{3,4,5}
    copy(s2,s1)
    fmt.Println(s2)
}
//[1 2 5]
```
> 拷贝的长度为两个切片中长度较小的长度值

#### 切片作为函数参数

```go
func main(){
    a := make([]int, 5)
    init(a)
    fmt.Println(a)
}
func init(num []int){
    for i:=0; i< len(num); i++ {
        num[i] =i
    }
}
[0 1 2 3 4]
```
> 在函数中修改切片的值，会影响到原切片







