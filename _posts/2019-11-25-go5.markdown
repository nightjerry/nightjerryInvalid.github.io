---
layout: post
title:  "go5 面向对象"
date: 2019-11-25 16:45:02 +0800
categories: jekyll update
tags: go
---

## 5面向对象
[TOC]
### 对象创建

```go
type Student struct {
    id int
    name string
    age int
}
func main(){
    var stu Student = Student{101, "tom",19}
    var stu1 = Student{102, "lili",19}
}
```
### 继承

```go
type Person struct {
    id int
    name string
    age int
}
type Student struct {
//通过匿名字段，实现继承
    Person //匿名字段，只有类型，没有成员名
    score float64
}
func main(){
    var stu Student = Student{Person{101, "tom",19},90}
    fmt.Println(stu)   
}
```
部分成员初始化

```go
func main(){
    var stu1 = Student{Person:Person{name:"jack", age:18}}
	var stu2 = Student{score:90}
}
```

#### 成员操作
方式: `对象名.成员`

```go
func main(){
    fmt.Println(stu.Person.name)    //tom
    fmt.Println(stu.name)           //tom
    
    //修改成员
    stu.id = 11
}
```
#### 指针类型匿名字段

```go
type Person struct {
    id int
    name string
    age int
}
type Student struct {
    *Person //指针类型匿名字段
    score float64
}
func main(){
    var stu Student = Student{&Person{101, "tom",19},90}
    fmt.Println(stu)   //{0xc000084000 90}
    fmt.Println(stu.name)     //tom
}
```
#### 多重继承
#### 结构体添加方法
语法: `func (对象名 结构体类型)方法名(参数列表)(返回值列表){ code }`

```go
type Student struct{
    id int
	name string
	age int
}
func main(){
    var stu = Student{101, "tom",19}
    s.EditInfo()
    stu.PrintInfo()
}
//结构体函数
func (s Student)PrintInfo(){
    fmt.Println(s)
}

//结构体指针(常用)
func (s *Student)EditInfo(){
    s.age = 20
}
```
> 接收者类型不同，即使方法名相同，也是不同方法
> 接收者为指针类型

#### 方法继承
子类调用父类方法

```go
type Person struct {
    id int
    name string
    age int
}
type Student struct {
    Person
    score float64
}
func (p *Person)PrintInfo(){
    fmt.Println(*p)
}
func main(){
    stu := Student{Person{101, "tom", 19},90}
    stu.PrintInfo()   //{101 tom 19}
}
```

#### 方法重写override

```go
func (s *Student)PrintInfo(){
    fmt.Println("this is student method")
}
func main(){
    stu.PrintInfo()           //执行子类的方法
    stu.Person.PrintInfo()    //执行父类的方法
}
```
#### 方法值与方法表达式
```go
func main(){
    stu := Student{Person{101, "tom", 19},90}
    f := stu.PrintInfo  //f是方法值
    fmt.Printf("%T", f)  //func()
    f()  //执行stu.PrintInfo()
}
```
```go
//方法表达式
func main(){
    f := (*Person).PrintInfo
    f(&stu)
}
```

### 接口
`type 接口名称 interface { 方法声明 }`

```go
type Person interface {
	SayHello()
}

type Student struct {

}

func (s *Student)SayHello(){
	fmt.Println("good morning")
}

func main() {
	var stu Student
	
	//通过接口变量来调用，必须都实现接口中所声明的方法
	var p Person
	p = &stu
	p.SayHello()
}
```
> 一般接口名以`er`结尾

#### 多态
就是同一个接口，使用不同的实例而执行不同操作
实现多态

```go
func 函数名(参数 接口类型) { }
```

```go
type Person interface {
	SayHello()
}

type Student struct {

}
type Teacher struct {}

func (t *Teacher)SayHello(){
	fmt.Println("teacher sayhello")
}

func (s *Student)SayHello(){
	fmt.Println("good morning")
}
//多态
func say(p Person){
	p.SayHello()
}

func main() {
	var stu Student
	var t Teacher
	//传地址
	say(&stu)
	say(&t)
}
```
#### 接口继承

```go
type Human interface{
    SayHello()
}
type Person interface {
    Human
    Say()
}
type Student struct {
}   
func (s *Student)SayHello(){
    
}
func (s *Student)Say(){
    
}
func main(){
    var stu Student
    var p Person
    p = &stu
    p.Say()
    p.SayHello()
}
    
```
#### 空接口定义
是没有方法的接口，可以存储任意类型的数据

```go
func main(){
    var i interface{}
    i = 123
    i = "abc"
    fmt.Println(i)
    
    var s []interface{}
    s = append(s, 123,"abc",'a', true, 3.14)
    fmt.Println(s) //string[123 abc 97 true 3.14]
}
```
#### 断言
通过类型断言，可以判断空接口中存储的数据类型
语法:

```
value, ok := m.(T)
m: 空接口类型变量
T: 断言的类型
value: 变量m中的值
ok: 断言结果，成功true,失败false
```
```go
func main(){
    var i interface{}
    i = 123
    value, ok := i.(int)
    if ok{
        //断言成功
    }else{
        //断言失败
    }
}
```


