---
layout: post
title:  "kotlin2 fun"
date:   2019-11-14 16:58:02 +0800
categories: jekyll update
tags: kotlin
---

## 函数的定义与调用
### 命名参数

```kotlin
val list= listOf(1,2,3)
println(list) // [1,2,3]
```
更改集合的显示样式

```kotlin
fun <T> joinToString(collection: Collection<T>,
separator: String, prefix: String, postfix: String): String{
    val result = StringBuilder(prefix)
    for ((index, element) in collection.withIndex())        {
        if(index >0)
            result.append(separator)
        result.append(element)
    }
    result.append(postfix)
    return result.toString()
}
println(joinToString(list,";","(",")")) //(1;2;3)
```
命名参数就是在调用函数时给参数指定名字，提高可读性；

```kotlin
joinToString(list,separator=";", prefix="(", postfix=")")
```
> 如果调用函数时，指明了一个参数的名称，为避免混淆，它之后的所有参数都需要标明名称；(否则编译失败)
> 如使用命名参数，可以不按照参数列表顺序使用；

### 默认参数值
函数的参数带有默认值，替代java中的函数重载

```kotlin
fun <T> joinToString(collection: Collection<T>, separator : String =",", prefix: String="", postfix:String =""):String {
    ...
}
joinToString(list) //1,2,3
joinToString(list,";")// 1;2;3
```

### 顶层函数：替代java静态工具类
顶层函数：将函数放到代码文件的顶层，不从属于任何类，依然是包内的成员。

```kotlin
package com.jerry.kotlin
fun join2String(...): String{...}
```

使用`const`关键字修饰属性，相当于java的`public static final`, 适用于所有的基本数据类型和String类型；
### 扩展函数: 给别人的类添加方法
扩展函数：简单说就是类的成员函数，但定义在类的外面；
定义方式：函数名称前添加要扩展的类或接口的名称，称为`接受者类型`；`接受者对象`是该类型的一个实例；
下面的`String`是接受者类型；`Kotlin`是接受者对象；

```kotlin
fun String.lastChar(): Char = this.get(this.length-1)
println("Kotlin".lastChar()) // n
```
> 在扩展函数中，可以直接访问被扩展的类的其它方法和属性；但不允许打破原有类的封装性，也就是说不能访问私有的或受保护的成员。

扩展函数是java静态函数的一个高效的语法糖,由于静态性质决定了扩展函数不能被子类重写.
在导入声明时，使用`as`关键字是唯一解决命名冲突的问题；

```kotlin
import String.lastChar as last
val c = "Kotlin".last()
```

```kotlin
fun <T> Collection<T>.joinToString(separator: String=",", prefix:String="", postfix:String=""): String {
    val result = StringBuilder(prefix)
    for ((index, element) in collection.withIndex())        {
        if(index >0)
            result.append(separator)
        result.append(element)
    }
    result.append(postfix)
    return result.toString()
}
val list = listOf(1,2,3)
println(list.joinToString(separator=";", prefix="(", postfix=")")) // (1;2;3)
```
### 扩展函数不可重写
扩展函数声明在类外，不是类的一部分，给基类和子类都分别定义同名的扩展函数，当该函数被调用时，由对象的静态类型决定；

```kotlin
//父类open修饰才能被继承
open class View{
    open fun click() = println("view click")
}
//子类继承父类
class Button: View(){
    override fun click() = println("Button click")
}
//分别定义同名的扩展函数
fun View.showOff = println("i'm a view")
fun Button.showOff = println("i'm a button")

val view: View = Button()
view.click()       //Button click
view.showOff()     //i'm a view
```

> 如果类的成员函数和扩展函数有相同的方法名，优先调用成员函数.

### 扩展属性
必须定义getter函数，因为没有支持字段，因此没有默认的getter的实现；也不可以初始化，因为没有地方存储初始值.

```kotlin
val String.lastChar: Char
    get() = get(length-1)
```
声明一个可变的扩展属性

```kotlin
var StringBuild.lastChar: Char 
    get() = get(length-1)
    set(value: Char){
        this.setCharAt(length-1, value)
    }
println("Kotlin".lastChar) //n
val sb = StringBuilder("Kotlin?")
sb.lastChar = "!"
println(sb) //Kotlin!
```
## 处理集合：可变参数，中缀调用
`vararg`:可变参数的关键字，可以用来声明一个函数有任意数量的参数
解构声明： 将单独的组合值展开得到多个变量
展开运算符`*`, 加在在参数前；
## 字符串：多行三重引号
三重引号字符串，不仅避免转义字符，可以包含任何字符，包括换行符

```kotlin
val kotlinLogo = """| //
                   .|//
                   .|/  \"""

println(kotlinLogo.trimMargin("."))
```
> 多行字符串包含三重引号之间所有字符(包括格式化代码的缩进);
> 向字符串添加前缀，标记边距的结尾，调用`trimMargin`删除每行的前缀和前面的空格；上例中，使用了点做前缀

## 局部函数
kotlin的函数中可以嵌套函数，嵌套的函数被称为局部函数，用于解决外层函数中代码重复书写问题；
带重复代码的函数：

```kotlin
class User(val id:Int, val name:String, val address:String)

fun saveUser(user: User) {
    if(user.name.isEmpty()){
        throw IllegalArgumentException("Can't save user ${user.id}: empty name")
    }
    if(user.address.isEmpty()){
        throw IllegalArgumentException("Can't save user ${user.id}: empty address")
    }
    //save user
}
```
### 声明局部函数

```kotlin
fun saveUser(user:User) {
//局部函数
    fun validate(user: User, value: String, fieldName: String) {
        if (value.isEmpty()){
            throw IllegalArgumentException("Can't save user ${user.id}: empty $fieldName")
        }
    }
    validate(user, user.name, "Name")
    validate(user, user.address, "address")
    // save user
}
```
局部函数可访问外层函数的参数，所以上段代码`validate`的user参数可去掉

